generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model University {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  colleges    College[]
}

model College {
  id           String     @id @default(uuid())
  name         String     @unique
  location     String
  description  String
  universityId String
  directorId   String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  director     User?      @relation("DirectorCollege", fields: [directorId], references: [id])
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  schools      School[]

  @@index([universityId])
}

model School {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  collegeId   String
  deanId      String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  college     College      @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  dean        User?        @relation("DeanSchool", fields: [deanId], references: [id])

  @@index([collegeId])
}

model Department {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  schoolId    String
  hodId       String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hod         User?     @relation("HodDepartment", fields: [hodId], references: [id])
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  programs    Program[]

  @@index([schoolId])
}

model Program {
  id           String     @id @default(uuid())
  name         String
  description  String
  departmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  students     Student[]  @relation("StudentProgram")

  @@unique([name, departmentId])
  @@index([departmentId])
}

enum USER_TYPE {
  NORMAL
  STUDENT
  STAFF
}

enum ROLES {
  ADMIN
  PRINCIPAL
  DEAN
  HOD
  MENTOR
  STUDENT
  NORMAL
}

enum STATUS {
  ACTIVE
  INACTIVE
}

model User {
  id              String        @id @default(uuid())
  firstName       String
  lastName        String
  email           String        @unique
  gender          String
  phone           String
  password        String
  dateOfBirth     DateTime
  userType        USER_TYPE     @default(NORMAL)
  role            ROLES         @default(NORMAL)
  status          STATUS        @default(INACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  directorCollege College?      @relation("DirectorCollege")
  hodDepartment   Department?   @relation("HodDepartment")
  otp             Otp?
  projectTeams    ProjectTeam[]
  deanSchool      School?       @relation("DeanSchool")
  staffProfile    Staff?
  studentProfile  Student?

  @@index([email])
  @@index([role])
  @@index([status])
  @@map("User")
}

model Student {
  userId    String   @id
  regNo     String   @unique
  programId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program   Program? @relation("StudentProgram", fields: [programId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([programId])
}

model Staff {
  userId    String   @id
  jobTitle  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Otp {
  id          String   @id @default(uuid())
  code        String
  userId      String   @unique
  createdAt   DateTime @default(now())
  expiredDate DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id            String           @id @default(uuid())
  title         String
  description   String
  initiatedFrom String
  beneficialist String
  status        PROJECTSTATUS    @default(NOT_SUBMITTED)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  fields        ProjectField[]
  sponsors      ProjectSponsor[]
  tags          ProjectTag[]
  teamMembers   ProjectTeam[]
}

model ProjectTeam {
  projectId String
  userId    String
  roleTeam  ROLETEAM @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  projects ProjectTag[]
}

model Field {
  id       String         @id @default(uuid())
  name     String         @unique
  projects ProjectField[]
}

model Sponsor {
  id       String           @id @default(uuid())
  name     String           @unique
  projects ProjectSponsor[]
}

model ProjectTag {
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
}

model ProjectField {
  projectId String
  fieldId   String
  field     Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, fieldId])
}

model ProjectSponsor {
  projectId String
  sponsorId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id], onDelete: Cascade)

  @@id([projectId, sponsorId])
}

enum PROJECTSTATUS {
  NOT_SUBMITTED
  PENDING
  REJECTED
  IN_PROGRESS
}

enum ROLETEAM {
  MEMBER
  TEAM_LEADER
  MENTOR
}
